# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'e:\Python\project\screen_qt5\uicomponent\drawing_widget1.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import typing
from PyQt5 import QtCore, QtGui, QtWidgets
from typing import Optional, Callable

class FormSettings:
    def __init__(
            self,
            form_name: str,
            size: tuple,
            opacity: Optional[float]=1,
            window_flags_show: Optional[bool]=True,
            style_sheet: Optional[str] = "",
            translate: Optional[str] = ""
        ) -> None:
        self.form_name = form_name
        self.size = size
        self.opactiy = opacity
        self.window_flags_show = window_flags_show
        self.style_sheet = style_sheet
        self.translate = translate

class Ui_Form(QtWidgets.QDialog):

    is_tagging_signal_data = QtCore.pyqtSignal(bool)
    cancel_event = QtCore.pyqtSignal()
    save_event = QtCore.pyqtSignal()

    def __init__(self, 
                 parent: typing.Optional[QtWidgets.QWidget] = None,
            ) -> None:
        super(Ui_Form, self).__init__(parent)
        self.setupUi()
        self.clicked_button = None
        self.is_tagging = False

    def box_selection_on_clicked(self):
        sender: QtWidgets.QPushButton = self.sender()
        sender.setStyleSheet(
            ".QPushButton { \n"
            "    font-family: \'Microsoft YaHei\'; \n"
            "    font-size: 15px; \n"
            "    letter-spacing: 2px; \n"
            "    font-weight: bold;\n"
            "    background-color: white; \n"
            "    color: black; \n"
            "    border: 2px solid gray; \n"
            "    border-radius: 10px; \n"
            "    border-color: none;\n"
            "}\n"
            " "
        )
        self.is_tagging = not self.is_tagging
        sender.setText('框选' if not self.is_tagging else '截图')
        if self.receivers(self.is_tagging_signal_data) > 0:
           self.is_tagging_signal_data.emit(self.is_tagging)

    def box_cancel_on_clicked(self):
        self.cancel_event.emit()

    def save_on_clicked(self):
        self.save_event.emit()

    def setupUi(self):
        self.set_form(FormSettings(
            'tools',
            (400, 60),
            0.8,
            False,
            "background-color:black; opacity:0.5",
            '工具栏'
        ))
        self.box_selection = QtWidgets.QPushButton(self)
        self.box_selection.setGeometry(QtCore.QRect(34, 10, 81, 41))
        self.set_button(self.box_selection, "box_selection", "框选", self.box_selection_on_clicked)
        self.cancel = QtWidgets.QPushButton(self)
        self.cancel.setGeometry(QtCore.QRect(164, 10, 81, 41))
        self.set_button(self.cancel, "cancel", "取消", self.box_cancel_on_clicked)
        self.save = QtWidgets.QPushButton(self)
        self.save.setGeometry(QtCore.QRect(294, 10, 81, 41))
        self.set_button(self.save, "save", "保存", self.save_on_clicked)
        self.save.setObjectName("save")
        QtCore.QMetaObject.connectSlotsByName(self)

    def set_button(self, button: QtWidgets.QPushButton, button_name, button_text, on_click: Optional[Callable] = None)-> str:
        _translate = QtCore.QCoreApplication.translate
        button.setStyleSheet(
            ".QPushButton {\n"
            "    color: white; \n"
            "    font-family: \'Microsoft YaHei\'; \n"
            "    font-size: 15px; \n"
            "    letter-spacing: 2px; \n"
            "    font-weight: bold;\n"
            "}\n"
            "\n"
            ".QPushButton:hover { \n"
            "    background-color: white; \n"
            "    color: black; \n"
            "    border: 2px solid gray; \n"
            "    border-radius: 10px; \n"
            "    border-color: none;\n"
            "}\n"
            " "
        )
        button.setObjectName(button_name)
        button.setText(_translate("Form", button_text))

        anim = QtCore .QPropertyAnimation(button, b"geometry")
        anim.setDuration(100)
        anim.setStartValue(button.geometry().adjusted(0, 0, -3, -3))
        anim.setEndValue(button.geometry())
        anim.setLoopCount(1)
        

        if on_click is not None:
            button.clicked.connect(lambda: [anim.start(), on_click()])


    def set_form(self, form_settings: FormSettings):
        _translate = QtCore.QCoreApplication.translate
        self.setWindowOpacity(form_settings.opactiy)
        if not form_settings.window_flags_show:
            self.setWindowFlags(QtCore.Qt.WindowStaysOnTopHint |QtCore.Qt.FramelessWindowHint)
        self.setObjectName(form_settings.form_name)
        self.resize(*form_settings.size)
        self.setStyleSheet(form_settings.style_sheet)
        self.setWindowTitle(_translate("Form", form_settings.translate))


if __name__ == '__main__':
    import sys
    app = QtWidgets.QApplication(sys.argv)
    ui = Ui_Form()
    ui.show()
    sys.exit(app.exec_())